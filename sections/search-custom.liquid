<style>
  #search_custom {
    display: grid;
    grid-template-rows: repeat(3, max-content);
    gap: 1rem;
    margin: 2rem var(--desktop-container-gutter);
  }

  #search_custom > #search_breadcrumbs {
    display: grid;
    grid-template-columns: repeat(3, max-content);
    gap: 0.25rem;
    list-style-type: none;
  }

  #search_custom > #search_breadcrumbs > li {
    display: grid;
  }

  #search_custom > #search_breadcrumbs > li > a {
    text-decoration: none;
  }

  #search_custom > #search_breadcrumbs > #current_page > a {
    color: #308a36;
  }

  #search_custom > #search_breadcrumbs > li > a:hover {
    text-decoration: underline;
  }

  #search_custom > h1 {
    margin: 0;
    font-size: 28px;
    color: #308a36;
  }

  #search_custom > #search_results_custom {
    display: grid;
    list-style-type: none;
    grid-template-columns: repeat(4, 1fr);
    gap: 2rem;
  }

  #search_custom > h2 {
    margin: 0;
    font-size: 32px;
  }

  @media screen and (min-width: 1499px) {
    #search_custom {
      margin: 2rem 9vw;
    }
  }

  @media screen and (min-width: 2559px) {
    #search_custom {
      margin: 2rem 18vw;
    }
  }

  .search-tabs {
    display: grid;
    grid-auto-flow: column;
    gap: 2rem;
    justify-content: center;
    margin-bottom: 2rem;
  }

  .search-tabs a {
    color: #308a36;
    border-bottom: 2px solid transparent;
    text-decoration: none;
    font-weight: 700 !important;
    font-size: 20px;
  }

  .search-tabs a[aria-current='page'] {
    border-bottom-color: #ffbb12;
  }

  @media screen and (max-width: 1349px) {
    #search_custom > #search_results_custom {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media screen and (max-width: 1000px) {
    #search_custom {
      gap: 0.5rem;
      grid-template-rows: repeat(2, max-content);
      margin: 1rem var(--mobile-container-gutter);
    }

    .search-tabs {
      margin-bottom: 1rem;
    }

    .search-tabs a {
      font-size: 16px;
    }

    #search_custom > #search_results_custom {
      grid-template-columns: 1fr;
    }

    #search_custom > #search_breadcrumbs {
      display: none;
    }

    #search_custom > h1 {
      font-size: 16px;
      max-width: 20rem;
    }

    #search_custom > h2 {
      font-size: 18px;
      max-width: 20rem;
    }
  }

  .search-tabs a.disabled {
    color: #999;
    border-bottom-color: transparent;
    pointer-events: none;
    cursor: not-allowed;
  }
</style>

<section id="search_custom">
  <ul id="search_breadcrumbs">
    <li><a href="{{ routes.root_url }}">Página inicial</a></li>
    <span>></span>
    <li id="current_page">
      <a href="">Resultados de pesquisa com {{ search.terms }}</a>
    </li>
  </ul>

  <h1>Resultados com "{{ search.terms }}"</h1>

  {% if search.results.size == 0 %}
    <h2>Nenhum resultado encontrado</h2>
  {% else %}
    {% assign term_qs = search.terms | url_encode %}
    {% assign base_search_url = routes.search_url %}
    {% assign href_products = base_search_url | append: '?q=' | append: term_qs | append: '&type=product' %}
    {% assign href_articles = base_search_url | append: '?q=' | append: term_qs | append: '&type=article' %}

    <div class="search-tabs">
      <a id="tab-products" href="{{ href_products }}">Produtos (<span>…</span>)</a>
      <a id="tab-articles" href="{{ href_articles }}">Blog (<span>…</span>)</a>
    </div>

    {% paginate search.results by 16 %}
      <ul id="search_results_custom">
        {%- for result in search.results -%}
          {% if result.object_type == 'product' %}
            {%- render 'product-item-2', product: result -%}
          {% else %}
            {%- render 'article-item-custom', article: result -%}
          {% endif %}
        {%- endfor -%}
      </ul>

      {%- render 'pagination', paginate: paginate -%}
    {% endpaginate %}
  {% endif %}
</section>

<script>
  document.addEventListener('DOMContentLoaded', async () => {
    const term = {{ search.terms | json }};
    const endpoint = '/api/2025-07/graphql.json';
    const token = 'bfe1eb076dd1eeff39af26ba722acebf';

    const params = new URLSearchParams(location.search);
    const type = params.get('type'); // 'product' | 'article' | null (ambos)
    const tabProducts = document.getElementById('tab-products');
    const tabArticles = document.getElementById('tab-articles');

    if (type === 'product' && tabProducts) tabProducts.setAttribute('aria-current', 'page');
    if (type === 'article' && tabArticles) tabArticles.setAttribute('aria-current', 'page');

    async function getCount(types) {
      const query = `
        query Count($term: String!, $types: [SearchType!]!) {
          search(query: $term, types: $types, first: 1) {
            totalCount
          }
        }
      `;
      const res = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Storefront-Access-Token': token
        },
        body: JSON.stringify({ query, variables: { term, types } })
      });
      if (!res.ok) throw new Error('GraphQL HTTP error');
      const json = await res.json();
      return json?.data?.search?.totalCount ?? 0;
    }

    try {
      const [productsCount, articlesCount] = await Promise.all([
        getCount(['PRODUCT']),
        getCount(['ARTICLE'])
      ]);

      const pEl = document.querySelector('#tab-products span');
      const aEl = document.querySelector('#tab-articles span');

      if (pEl) pEl.textContent = productsCount.toLocaleString('pt-PT');
      if (aEl) aEl.textContent = articlesCount.toLocaleString('pt-PT');

      const tabProducts = document.getElementById('tab-products');
      const tabArticles = document.getElementById('tab-articles');

      if (productsCount === 0 && tabProducts) {
        tabProducts.classList.add('disabled');
        tabProducts.removeAttribute('href'); // remove o link
      }

      if (articlesCount === 0 && tabArticles) {
        tabArticles.classList.add('disabled');
        tabArticles.removeAttribute('href');
      }
    } catch (e) {
      console.warn('Falha ao carregar totais via GraphQL:', e);
    }
  });
</script>

{% schema %}
{
  "name": "Search custom",
  "settings": [
    {
      "type": "image_picker",
      "id": "selected_img",
      "label": "Imagem da Rita"
    }
  ],
  "presets": [
    {
      "name": "Search custom",
      "category": "search"
    }
  ]
}
{% endschema %}
